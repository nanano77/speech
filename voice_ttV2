<!DOCTYPE html>
<html lang="zh-Hant">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>語音圖層聊天室</title>
  <style>
    body {
      font-family: sans-serif;
      padding: 1em;
      background-color: #e5ddd5;
    }

    h2 {
      margin-bottom: 0.5em;
    }

    .toolbar {
      display: flex;
      gap: 1em;
      align-items: center;
      flex-wrap: wrap;
      margin-bottom: 1em;
    }

    button {
      padding: 0.8em 1.2em;
      font-size: 1.1em;
      background-color: #0c82f0;
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
    }

    button:active {
      background-color: #0a6fd0;
    }

    select {
      font-size: 1em;
      padding: 0.4em;
    }

    .chatbox {
      background: #f1f1f1;
      border-radius: 8px;
      padding: 1em;
      height: 65vh;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 1em;
    }

    .message {
      max-width: 75%;
      padding: 0.8em 1em;
      border-radius: 16px;
      position: relative;
      white-space: pre-wrap;
      word-wrap: break-word;
      line-height: 1.5;
    }

    .user {
      align-self: flex-end;
      background-color: #dcf8c6;
      border-bottom-right-radius: 0;
    }

    .system {
      align-self: flex-start;
      background-color: #ffffff;
      border-bottom-left-radius: 0;
    }

    @media (max-width: 768px) {
      .chatbox {
        height: 60vh;
      }
    }
  </style>
</head>
<body>
  <h2>語音聊天室控制圖層</h2>
  <div class="toolbar">
    <button id="toggle">🎤 按住說話</button>
    <label>
      模式：
      <select id="mode">
        <option value="local">本地規則</option>
        <option value="gpt">GPT 模型</option>
      </select>
    </label>
  </div>
  <div id="chat" class="chatbox"></div>

  <script>
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      alert("❌ 你的瀏覽器不支援語音辨識，請使用 Chrome");
    }

    const recognition = new SpeechRecognition();
    recognition.lang = "zh-TW";
    recognition.continuous = true;
    recognition.interimResults = true;

    let finalText = "";
    let interimText = "";

    const toggle = document.getElementById("toggle");
    const chatbox = document.getElementById("chat");
    const modeSelector = document.getElementById("mode");

    function appendMessage(text, sender = "system") {
      const bubble = document.createElement("div");
      bubble.className = `message ${sender}`;
      bubble.textContent = text;
      chatbox.appendChild(bubble);
      chatbox.scrollTop = chatbox.scrollHeight;
    }

    const layerList = [
      { id: "cadastreLayer", name: "地籍圖" },
      { id: "taitungSoilLayer", name: "臺東農地重劃區" },
      { id: "urbanZone2024", name: "都市計畫使用分區圖" },
      { id: "publicPrivateLandLayer", name: "公私有土地分布圖" },
      { id: "organicLayer", name: "有機農地分布" },
      { id: "hotelLayer", name: "旅館" },
      { id: "bnbLayer", name: "民宿" },
    ];

    const layers = {};
    const activeLayers = new Set();

    layerList.forEach(layer => {
      layers[layer.id] = {
        name: layer.name,
        show: () => {
          console.log(`✅ 顯示 ${layer.name}`);
          activeLayers.add(layer.id);
        },
        hide: () => {
          console.log(`🚫 隱藏 ${layer.name}`);
          activeLayers.delete(layer.id);
        }
      };
    });

    const openKeywords = ["開啟", "打開", "顯示", "我要看", "展開", "叫出"];
    const closeKeywords = ["關閉", "關掉", "隱藏", "收起", "不要看"];
    const clearAllKeywords = ["全部關閉", "關閉全部"];

    async function handleCommand(text) {
      const mode = modeSelector.value;

      if (mode === "local") {
        if (clearAllKeywords.some(k => text.includes(k))) {
          activeLayers.forEach(id => layers[id].hide());
          return ["已關閉全部圖層", "（本地規則判斷）"];
        }

        const isOpen = openKeywords.some(k => text.includes(k));
        const isClose = closeKeywords.some(k => text.includes(k));

        for (const layer of layerList) {
          if (text.includes(layer.name)) {
            if (isOpen) {
              layers[layer.id].show();
              return [`已開啟 ${layer.name}`, "（本地規則判斷）"];
            } else if (isClose) {
              layers[layer.id].hide();
              return [`已關閉 ${layer.name}`, "（本地規則判斷）"];
            }
          }
        }
        return ["無法判斷指令", "（本地規則判斷）"];
      } else {
        const gptResult = await queryGPT(text);
        if (gptResult?.intent === "clear") {
          activeLayers.forEach(id => layers[id].hide());
          return ["已關閉全部圖層", "（GPT 判斷）"];
        }
        if (gptResult?.intent && Array.isArray(gptResult.targets)) {
          const actionText = gptResult.intent === "open" ? "已開啟" : "已關閉";
          gptResult.targets.forEach(id => {
            if (layers[id]) {
              if (gptResult.intent === "open") layers[id].show();
              if (gptResult.intent === "close") layers[id].hide();
            }
          });
          const names = gptResult.targets.map(id => layers[id]?.name).join("、");
          return [`${actionText} ${names}`, "（GPT 判斷）"];
        }
        return ["無法判斷指令", "（GPT 判斷）"];
      }
    }

    async function queryGPT(userInput) {
      try {
        const response = await fetch("/api/tt", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userInput })
        });
        return await response.json();
      } catch (err) {
        console.warn("GPT 錯誤：", err);
        return null;
      }
    }

    const startRecognition = () => {
      finalText = "";
      interimText = "";
      recognition.start();
    };

    const stopRecognition = () => {
      recognition.stop();
    };

    toggle.addEventListener("mousedown", startRecognition);
    toggle.addEventListener("mouseup", stopRecognition);
    toggle.addEventListener("mouseleave", stopRecognition);
    toggle.addEventListener("touchstart", (e) => {
      e.preventDefault();
      startRecognition();
    });
    toggle.addEventListener("touchend", stopRecognition);

    recognition.onresult = (event) => {
      interimText = "";
      for (let i = event.resultIndex; i < event.results.length; ++i) {
        const transcript = event.results[i][0].transcript;
        if (event.results[i].isFinal) {
          finalText = transcript;
        } else {
          interimText += transcript;
        }
      }
    };

    recognition.onerror = (e) => {
      alert("⚠️ 錯誤：" + e.error);
    };

    recognition.onend = async () => {
      const fullText = (finalText + interimText).trim();
      if (fullText) {
        appendMessage(fullText, "user");
        const [mainText, detailText] = await handleCommand(fullText);
        appendMessage(`${mainText}\n${detailText}`, "system");

        const utterance = new SpeechSynthesisUtterance(mainText);
        utterance.lang = "zh-TW";
        speechSynthesis.speak(utterance);
      }
    };
  </script>
</body>
</html>
